import base64, time, datetime, ftplib, io, random, csv
from Crypto.Cipher import AES
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_v1_5 as Cipher_PKCS1_v1_5
from Crypto.Signature import pkcs1_15 
from Crypto.Hash import SHA256
import OpenSSL
from six import u, b, binary_type, PY3
from base64 import b64decode
import socket
import os
from time import sleep

# These variables are to support the mock camera
my_pict = ""

# System  variable of main program



def connect_server_send( file_name: str , file_data: bytes , username, password, server_name) -> bool:
    """This function send file_data using FTP and save it as file_name in the remote server. It will simulate intermittent transfer. 
    Args:
        file_name (str): file_name of file save in server as a String
        file_data (bytes): content of file as byte array
    Returns:
        bool: True if send, False otherwise
    """
    try:
        if random.randrange(1,10) > 8: raise Exception("Generated Random Network Error")   # create random failed transfer   
        ftp = ftplib.FTP()  # use init will use port 21 , hence use connect()
        ftp.connect( server_name , 2121) # use high port 2121 instead of 21
        ftp.login(user=username, passwd = password)
        ftp.storbinary('STOR ' + file_name, io.BytesIO( file_data ) )
        ftp.quit()
        return True
    except Exception as e:
        print(e, "while sending", file_name )
        return False


def get_picture() -> bytes:
    """This function simulate a motion activated camera unit.  It will return 0 byte if no motion is detected.
    Returns:
        bytes: a byte array of a photo or 0 byte no motion detected
    """    

    time.sleep(1) # simulate slow processor
    if random.randrange(1,10) > 8:  # simulate no motion detected
        return b''
    else:
        return b64decode(my_pict)

def encrypt_AES_GCM(msg, secretKey):
    aesCipher = AES.new(secretKey, AES.MODE_GCM)
    ciphertext, authTag = aesCipher.encrypt_and_digest(msg)
    #print(len(ciphertext), len(aesCipher.nonce), len(authTag))
    return (ciphertext, aesCipher.nonce, authTag)


def encrypt_image(img) -> bytes:
  digest=SHA256.new(img)

  key = open("private.pem", "rb").read()
  privkey = RSA.import_key(key)
  signature = pkcs1_15.new(privkey).sign(digest) #256

  secretKey = os.urandom(32)  # 256-bit random encryption key
  encryptedMsg = encrypt_AES_GCM(img, secretKey) # Enc Image + IV(16) + Auth Tag(16)

  key = open("server-cert.crt", "rb").read()
  pubkey = RSA.import_key(key)
  cipher = Cipher_PKCS1_v1_5.new(pubkey)

  enckey = cipher.encrypt(secretKey) # RSA encrypted session key(128)
  return (b''.join(encryptedMsg) + enckey + signature)

# server_name,camera_id,username,password
camera_id = str(input("Camera ID: ")) #"2"
server_name = str(input("Server IP: ")) #"127.0.0.1"
username = str(input("Username: ")) #"camera2"
password = str(input("Password: ")) #"32$-k3+chL:#rHF?"

if not os.path.isfile('server-cert.crt'):
  ClientSocket = socket.socket()
  host = '127.0.0.1'
  port = 7777
  try:
    ClientSocket.connect((host, port))
  except socket.error as e:
    print(str(e))

  while 1:
    try:
      ClientSocket.sendall("[REQ-CERT]".encode())
      PublicKey = ClientSocket.recv(10240)
      CAPublicKey = open("ca-cert.crt", "rb").read()
      ca_cert = OpenSSL.crypto.load_certificate(OpenSSL.crypto.FILETYPE_PEM, CAPublicKey)
      untrusted_cert = OpenSSL.crypto.load_certificate(OpenSSL.crypto.FILETYPE_PEM, PublicKey)
      store = OpenSSL.crypto.X509Store()
      store.add_cert(ca_cert)
      store_ctx = OpenSSL.crypto.X509StoreContext(store, untrusted_cert)
      store_ctx.verify_certificate()
      open('server-cert.crt','wb').write(PublicKey)
      # ClientSocket.close()
      break
    except OpenSSL.crypto.X509StoreContextError:
        sleep(60)


  new_key = RSA.generate(2048, e=65537)
  open('private.pem','wb').write(new_key.exportKey("PEM"))
  stor_req = b"[STOR-CERT] "+ bytes(f"{username} ", 'utf-8') + new_key.publickey().exportKey("PEM")
  ClientSocket.sendall(stor_req)
  ClientSocket.close()

while True: # Main function
    try:  
        my_image = get_picture()  # get picture
        if len(my_image) == 0:
            time.sleep(10) # sleep for 10 sec if there is no image
            print("Random no motion detected")
        else:
            enc_image = encrypt_image(my_image)
            f_name = str(camera_id) + "_" +  datetime.datetime.now().strftime("%Y_%m_%d_%H_%M_%S.jpg" )
            if connect_server_send(f_name , enc_image, username, password, server_name): print(f_name , " sent" )
    except KeyboardInterrupt:  exit()  # gracefully exit if control-C detected